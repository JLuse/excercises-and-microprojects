{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAiC;AACjC,sDAA8D;AAC9D,qDAAuC;AAEvC,yBAAyB;AACzB,MAAM,GAAG,GAAY,IAAA,iBAAO,GAAE,CAAC;AAC/B,MAAM,IAAI,GAAG,IAAI,CAAC;AAElB,MAAM,CAAC,IAAI,CAAC;IACV,GAAG,EAAE,oFAAoF;IACzF,YAAY,EAAE;QACZ,4BAA4B;QAC5B,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QAC/C,uCAAuC;QACvC,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC;QACxC,4DAA4D;QAC5D,GAAG,MAAM,CAAC,iDAAiD,EAAE;KAC9D;IAED,8CAA8C;IAC9C,8CAA8C;IAC9C,kDAAkD;IAClD,gBAAgB,EAAE,GAAG;IACrB,KAAK,EAAE,IAAI;CACZ,CAAC,CAAC;AAEH,QAAQ;AACR,uCAAuC;AACvC,6CAA6C;AAC7C,oBAAoB;AACpB,4CAA4C;AAC5C,oCAAoC;AACpC,IAAI;AAEJ,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;AAC1C,4DAA4D;AAC5D,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;AAE1C,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAC3C,GAAG,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAChD,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC;AAEH,wFAAwF;AACxF,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;AAGxC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,qDAAqD,IAAI,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC","sourcesContent":["// import express from 'express';\nimport express, { Express, Request, Response } from 'express';\nimport * as Sentry from \"@sentry/node\";\n\n// const app = express();\nconst app: Express = express();\nconst port = 2121;\n\nSentry.init({\n  dsn: \"https://bb50cedf627b4d199e59236dc8bcdde2@o982579.ingest.sentry.io/4505241974800384\",\n  integrations: [\n    // enable HTTP calls tracing\n    new Sentry.Integrations.Http({ tracing: true }),\n    // enable Express.js middleware tracing\n    new Sentry.Integrations.Express({ app }),\n    // Automatically instrument Node.js libraries and frameworks\n    ...Sentry.autoDiscoverNodePerformanceMonitoringIntegrations(),\n  ],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n  debug: true,\n});\n\n// try {\n//   // Code that may generate an error\n//   throw new Error(\"This is a test error\");\n// } catch (error) {\n//   // Capture and send the error to Sentry\n//   Sentry.captureException(error);\n// }\n\napp.use(Sentry.Handlers.requestHandler());\n// TracingHandler creates a trace for every incoming request\napp.use(Sentry.Handlers.tracingHandler());\n\napp.get('/', (req: Request, res: Response) => {\n  res.send('Express + TypeScript Server');\n});\n\napp.get(\"/debug\", (req: Request, res: Response) => {\n  throw new Error(\"My first Sentry error!\");\n});\n\n// The error handler must be before any other error middleware and after all controllers\napp.use(Sentry.Handlers.errorHandler());\n\n\napp.listen(port, () => {\n  console.log(`⚡️[server]: Server is running at http://localhost:${port}`);\n});\n"]}