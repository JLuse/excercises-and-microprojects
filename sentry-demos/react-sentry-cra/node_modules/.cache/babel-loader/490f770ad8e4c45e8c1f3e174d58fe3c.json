{"ast":null,"code":"import { getGlobalObject, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport React__default from 'react';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouterv6.tsx\";\nlet activeTransaction;\n\nlet _useEffect;\n\nlet _useLocation;\n\nlet _useNavigationType;\n\nlet _createRoutesFromChildren;\n\nlet _matchRoutes;\n\nlet _customStartTransaction;\n\nlet _startTransactionOnLocationChange;\n\nvar global = getGlobalObject();\nvar SENTRY_TAGS = {\n  'routing.instrumentation': 'react-router-v6'\n};\n\nfunction reactRouterV6Instrumentation(useEffect, useLocation, useNavigationType, createRoutesFromChildren, matchRoutes) {\n  return function (customStartTransaction) {\n    let startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var initPathName = global && global.location && global.location.pathname;\n\n    if (startTransactionOnPageLoad && initPathName) {\n      activeTransaction = customStartTransaction({\n        name: initPathName,\n        op: 'pageload',\n        tags: SENTRY_TAGS,\n        metadata: {\n          source: 'url'\n        }\n      });\n    }\n\n    _useEffect = useEffect;\n    _useLocation = useLocation;\n    _useNavigationType = useNavigationType;\n    _matchRoutes = matchRoutes;\n    _createRoutesFromChildren = createRoutesFromChildren;\n    _customStartTransaction = customStartTransaction;\n    _startTransactionOnLocationChange = startTransactionOnLocationChange;\n  };\n}\n\nfunction getNormalizedName(routes, location, matchRoutes) {\n  if (!routes || routes.length === 0 || !matchRoutes) {\n    return [location.pathname, 'url'];\n  }\n\n  var branches = matchRoutes(routes, location);\n\n  if (branches) {\n    for (let x = 0; x < branches.length; x++) {\n      if (branches[x].route && branches[x].route.path && branches[x].pathname === location.pathname) {\n        var path = branches[x].route.path;\n\n        if (path) {\n          return [path, 'route'];\n        }\n      }\n    }\n  }\n\n  return [location.pathname, 'url'];\n}\n\nfunction withSentryReactRouterV6Routing(Routes) {\n  if (!_useEffect || !_useLocation || !_useNavigationType || !_createRoutesFromChildren || !_matchRoutes || !_customStartTransaction) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('reactRouterV6Instrumentation was unable to wrap Routes because of one or more missing parameters.');\n    return Routes;\n  }\n\n  let isBaseLocation = false;\n  let routes;\n\n  var SentryRoutes = props => {\n    var location = _useLocation();\n\n    var navigationType = _useNavigationType();\n\n    _useEffect(() => {\n      // Performance concern:\n      // This is repeated when <Routes /> is rendered.\n      routes = _createRoutesFromChildren(props.children);\n      isBaseLocation = true;\n\n      if (activeTransaction) {\n        const [name, source] = getNormalizedName(routes, location, _matchRoutes);\n        activeTransaction.setName(name);\n        activeTransaction.setMetadata({\n          source\n        });\n      }\n    }, [props.children]);\n\n    _useEffect(() => {\n      if (isBaseLocation) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        return;\n      }\n\n      if (_startTransactionOnLocationChange && (navigationType === 'PUSH' || navigationType === 'POP')) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        const [name, source] = getNormalizedName(routes, location, _matchRoutes);\n        activeTransaction = _customStartTransaction({\n          name,\n          op: 'navigation',\n          tags: SENTRY_TAGS,\n          metadata: {\n            source\n          }\n        });\n      }\n    }, [props.children, location, navigationType, isBaseLocation]);\n\n    isBaseLocation = false; // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params\n\n    return React__default.createElement(Routes, { ...props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      }\n    });\n  };\n\n  hoistNonReactStatics(SentryRoutes, Routes); // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params\n\n  return SentryRoutes;\n}\n\nexport { reactRouterV6Instrumentation, withSentryReactRouterV6Routing };","map":{"version":3,"mappings":";;;AAAA;AAkCA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AAEA;EACA;AADA;;sCAKAA,WACAC,aACAC,mBACAC,0BACAC,aACA;EACA,iBACAC,sBADA,EAIA;IAAA,IAFAC,0BAEA,uEAFA,IAEA;IAAA,IADAC,gCACA,uEADA,IACA;IACA;;IACA;MACAC;QACAC,kBADA;QAEAC,cAFA;QAGAC,iBAHA;QAIAC;UACAC;QADA;MAJA;IAQA;;IAEAC;IACAC;IACAC;IACAC;IACAC;IAEAC;IACAC;EACA,CAzBA;AA0BA;;AAEA,2BACAC,MADA,EAEAC,QAFA,EAGAlB,WAHA,EAIA;EACA;IACA;EACA;;EAEA;;EAEA;IACA;MAEA;QACA;;QACA;UACA;QACA;MACA;IACA;EACA;;EAEA;AACA;;;EAGA,IACA,eACA,aADA,IAEA,mBAFA,IAGA,0BAHA,IAIA,aAJA,IAKA,wBANA,EAOA;IACA,iEACAmB,gHADA;IAGA;EACA;;EAEA;EACA;;EAEA;IACA;;IACA;;IAEAT;MACA;MACA;MACAO;MACAG;;MAEA;QACA;QACAhB;QACAA;UAAAK;QAAA;MACA;IAEA,CAZA,EAYA,gBAZA;;IAeAC;MACA;QACA;UACAN;QACA;;QAEA;MACA;;MAEA;QACA;UACAA;QACA;;QAEA;QACAA;UACAC,IADA;UAEAC,gBAFA;UAGAC,iBAHA;UAIAC;YACAC;UADA;QAJA;MAQA;IACA,CAxBA,EAwBA,0DAxBA;;IA0BAW,uBA7CA,CA+CA;IACA;;IACA;MAAAC;MAAAC;QAAAC;QAAAC;MAAA;IAAA;EACA,CAlDA;;EAoDAC,4CAEA;EACA;;EACA;AACA","names":["useEffect","useLocation","useNavigationType","createRoutesFromChildren","matchRoutes","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","activeTransaction","name","op","tags","metadata","source","_useEffect","_useLocation","_useNavigationType","_matchRoutes","_createRoutesFromChildren","_customStartTransaction","_startTransactionOnLocationChange","routes","location","logger","isBaseLocation","__self","__source","fileName","lineNumber","hoistNonReactStatics"],"sources":["/Users/jordanluse/Desktop/projects/excercises-and-microprojects/sentry-demos/react-sentry-cra/node_modules/@sentry/src/reactrouterv6.tsx"],"sourcesContent":["// Inspired from Donnie McNeal's solution:\n// https://gist.github.com/wontondon/e8c4bdf2888875e4c755712e99279536\n\nimport { Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport React from 'react';\n\nimport { Action, Location } from './types';\n\ninterface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\ntype Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\ninterface RouteMatch<ParamKey extends string = string> {\n  params: Params<ParamKey>;\n  pathname: string;\n  route: RouteObject;\n}\n\ntype UseEffect = (cb: () => void, deps: unknown[]) => void;\ntype UseLocation = () => Location;\ntype UseNavigationType = () => Action;\ntype CreateRoutesFromChildren = (children: JSX.Element[]) => RouteObject[];\ntype MatchRoutes = (routes: RouteObject[], location: Location) => RouteMatch[] | null;\n\nlet activeTransaction: Transaction | undefined;\n\nlet _useEffect: UseEffect;\nlet _useLocation: UseLocation;\nlet _useNavigationType: UseNavigationType;\nlet _createRoutesFromChildren: CreateRoutesFromChildren;\nlet _matchRoutes: MatchRoutes;\nlet _customStartTransaction: (context: TransactionContext) => Transaction | undefined;\nlet _startTransactionOnLocationChange: boolean;\n\nconst global = getGlobalObject<Window>();\n\nconst SENTRY_TAGS = {\n  'routing.instrumentation': 'react-router-v6',\n};\n\nexport function reactRouterV6Instrumentation(\n  useEffect: UseEffect,\n  useLocation: UseLocation,\n  useNavigationType: UseNavigationType,\n  createRoutesFromChildren: CreateRoutesFromChildren,\n  matchRoutes: MatchRoutes,\n) {\n  return (\n    customStartTransaction: (context: TransactionContext) => Transaction | undefined,\n    startTransactionOnPageLoad = true,\n    startTransactionOnLocationChange = true,\n  ): void => {\n    const initPathName = global && global.location && global.location.pathname;\n    if (startTransactionOnPageLoad && initPathName) {\n      activeTransaction = customStartTransaction({\n        name: initPathName,\n        op: 'pageload',\n        tags: SENTRY_TAGS,\n        metadata: {\n          source: 'url',\n        },\n      });\n    }\n\n    _useEffect = useEffect;\n    _useLocation = useLocation;\n    _useNavigationType = useNavigationType;\n    _matchRoutes = matchRoutes;\n    _createRoutesFromChildren = createRoutesFromChildren;\n\n    _customStartTransaction = customStartTransaction;\n    _startTransactionOnLocationChange = startTransactionOnLocationChange;\n  };\n}\n\nfunction getNormalizedName(\n  routes: RouteObject[],\n  location: Location,\n  matchRoutes: MatchRoutes,\n): [string, TransactionSource] {\n  if (!routes || routes.length === 0 || !matchRoutes) {\n    return [location.pathname, 'url'];\n  }\n\n  const branches = matchRoutes(routes, location);\n\n  if (branches) {\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let x = 0; x < branches.length; x++) {\n      if (branches[x].route && branches[x].route.path && branches[x].pathname === location.pathname) {\n        const path = branches[x].route.path;\n        if (path) {\n          return [path, 'route'];\n        }\n      }\n    }\n  }\n\n  return [location.pathname, 'url'];\n}\n\nexport function withSentryReactRouterV6Routing<P extends Record<string, any>, R extends React.FC<P>>(Routes: R): R {\n  if (\n    !_useEffect ||\n    !_useLocation ||\n    !_useNavigationType ||\n    !_createRoutesFromChildren ||\n    !_matchRoutes ||\n    !_customStartTransaction\n  ) {\n    __DEBUG_BUILD__ &&\n      logger.warn('reactRouterV6Instrumentation was unable to wrap Routes because of one or more missing parameters.');\n\n    return Routes;\n  }\n\n  let isBaseLocation: boolean = false;\n  let routes: RouteObject[];\n\n  const SentryRoutes: React.FC<P> = (props: P) => {\n    const location = _useLocation();\n    const navigationType = _useNavigationType();\n\n    _useEffect(() => {\n      // Performance concern:\n      // This is repeated when <Routes /> is rendered.\n      routes = _createRoutesFromChildren(props.children);\n      isBaseLocation = true;\n\n      if (activeTransaction) {\n        const [name, source] = getNormalizedName(routes, location, _matchRoutes);\n        activeTransaction.setName(name);\n        activeTransaction.setMetadata({ source });\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.children]);\n\n    _useEffect(() => {\n      if (isBaseLocation) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        return;\n      }\n\n      if (_startTransactionOnLocationChange && (navigationType === 'PUSH' || navigationType === 'POP')) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        const [name, source] = getNormalizedName(routes, location, _matchRoutes);\n        activeTransaction = _customStartTransaction({\n          name,\n          op: 'navigation',\n          tags: SENTRY_TAGS,\n          metadata: {\n            source,\n          },\n        });\n      }\n    }, [props.children, location, navigationType, isBaseLocation]);\n\n    isBaseLocation = false;\n\n    // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params\n    return <Routes {...props} />;\n  };\n\n  hoistNonReactStatics(SentryRoutes, Routes);\n\n  // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params\n  return SentryRoutes;\n}\n"]},"metadata":{},"sourceType":"module"}